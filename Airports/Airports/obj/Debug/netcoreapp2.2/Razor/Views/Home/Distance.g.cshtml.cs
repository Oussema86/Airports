#pragma checksum "C:\Users\MarvinG3\source\repos\Airports\Airports\Views\Home\Distance.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b4521fc04ed586720b7d98118f4e1b6e518e3d8f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Distance), @"mvc.1.0.view", @"/Views/Home/Distance.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Distance.cshtml", typeof(AspNetCore.Views_Home_Distance))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\MarvinG3\source\repos\Airports\Airports\Views\_ViewImports.cshtml"
using Airports;

#line default
#line hidden
#line 2 "C:\Users\MarvinG3\source\repos\Airports\Airports\Views\_ViewImports.cshtml"
using Airports.Models;

#line default
#line hidden
#line 4 "C:\Users\MarvinG3\source\repos\Airports\Airports\Views\_ViewImports.cshtml"
using NonFactors.Mvc.Grid;

#line default
#line hidden
#line 5 "C:\Users\MarvinG3\source\repos\Airports\Airports\Views\_ViewImports.cshtml"
using AirportsData.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b4521fc04ed586720b7d98118f4e1b6e518e3d8f", @"/Views/Home/Distance.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b4b6fa710db479af851cc4b270b85998be90b224", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Distance : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Airports.Models.Home.HomeModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(40, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "C:\Users\MarvinG3\source\repos\Airports\Airports\Views\Home\Distance.cshtml"
  
    ViewData["Title"] = "Distance calculation";

#line default
#line hidden
            BeginContext(98, 45, true);
            WriteLiteral("\r\n<script>\r\n    let principalAirportCode =  \'");
            EndContext();
            BeginContext(145, 15, false);
#line 8 "C:\Users\MarvinG3\source\repos\Airports\Airports\Views\Home\Distance.cshtml"
                             Write(Model.Principal);

#line default
#line hidden
            EndContext();
            BeginContext(161, 33, true);
            WriteLiteral("\';\r\n    let targetAirportCode = \'");
            EndContext();
            BeginContext(196, 12, false);
#line 9 "C:\Users\MarvinG3\source\repos\Airports\Airports\Views\Home\Distance.cshtml"
                         Write(Model.Target);

#line default
#line hidden
            EndContext();
            BeginContext(209, 450, true);
            WriteLiteral(@"';
    let allAirports = [];

    $(document).ready(function () {
        $('#principalDDL').change(function () {
            principalAirportCode = $('#principalDDL').val();
            calculateDistance();
        });

        $('#targetDDL').change(function () {
            targetAirportCode = $('#targetDDL').val();
            calculateDistance();
        });

        // Get all the airports in a JS array
        allAirports = ");
            EndContext();
            BeginContext(660, 44, false);
#line 24 "C:\Users\MarvinG3\source\repos\Airports\Airports\Views\Home\Distance.cshtml"
                 Write(Html.Raw(Json.Serialize(Model.AirportsList)));

#line default
#line hidden
            EndContext();
            BeginContext(704, 1920, true);
            WriteLiteral(@";

        // Calculate if we have 2 parameters on load
        calculateDistance();
    });

    function calculateDistance() {
        $(""#distance"").html('');

        if (allAirports.length > 0 && principalAirportCode != undefined && targetAirportCode != undefined) {
            let principalAirport = allAirports.find(x => x.iata == principalAirportCode);
            let targetAirport = allAirports.find(x => x.iata == targetAirportCode);

            if (principalAirport != null && principalAirport != undefined && targetAirport != null && targetAirport != undefined) {
                let principalAirportLong = principalAirport.lon;
                let principalAirportLat = principalAirport.lat;

                let targetAirportLong = targetAirport.lon;
                let targetAirportLat = targetAirport.lat;

                var distance = distanceInKmBetweenEarthCoordinates(principalAirportLat, principalAirportLong, targetAirportLat, targetAirportLong, 'K');
                $(""#dis");
            WriteLiteral(@"tance"").html(`The distance between the two airports is: ${distance}`);
            }
        }
    }

    function degreesToRadians(degrees) {
        return degrees * Math.PI / 180;
    }

    function distanceInKmBetweenEarthCoordinates(lat1, lon1, lat2, lon2) {
        var earthRadiusKm = 6371;

        var dLat = degreesToRadians(lat2 - lat1);
        var dLon = degreesToRadians(lon2 - lon1);

        lat1 = degreesToRadians(lat1);
        lat2 = degreesToRadians(lat2);

        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return earthRadiusKm * c;
    }
</script>

<div class=""row"">
    <div class=""col-5"">
        <label for=""principalDDL"">
            Principal
        </label>
        ");
            EndContext();
            BeginContext(2626, 236, false);
#line 76 "C:\Users\MarvinG3\source\repos\Airports\Airports\Views\Home\Distance.cshtml"
    Write(Html.DropDownListFor(model => model.Principal, Model.AirportsList.Where(x => !string.IsNullOrEmpty(x.Name)).Select(x => new SelectListItem() { Text = $"[{x.Iata}] {x.Name}", Value = x.Iata }), "", new { @id = "principalDDL" })
        );

#line default
#line hidden
            EndContext();
            BeginContext(2863, 118, true);
            WriteLiteral("\r\n    </div>\r\n    <div class=\"col-5\">\r\n        <label for=\"targetDDL\">\r\n            Target\r\n        </label>\r\n        ");
            EndContext();
            BeginContext(2983, 230, false);
#line 83 "C:\Users\MarvinG3\source\repos\Airports\Airports\Views\Home\Distance.cshtml"
    Write(Html.DropDownListFor(model => model.Target, Model.AirportsList.Where(x => !string.IsNullOrEmpty(x.Name)).Select(x => new SelectListItem() { Text = $"[{x.Iata}] {x.Name}", Value = x.Iata }), "", new { @id = "targetDDL" })
        );

#line default
#line hidden
            EndContext();
            BeginContext(3214, 39, true);
            WriteLiteral("\r\n    </div>\r\n    <div class=\"col-2\">\r\n");
            EndContext();
            BeginContext(3361, 51, true);
            WriteLiteral("    </div>\r\n</div>\r\n\r\n<div id=\"distance\">\r\n\r\n</div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Airports.Models.Home.HomeModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
